/* automatically generated by rust-bindgen 0.69.2 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type HANDLE = *mut ::core::ffi::c_void;
pub type HMODULE = HANDLE;
pub type HWND = HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11DeviceContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11RenderTargetView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDXGISwapChain {
    _unused: [u8; 0],
}
pub type RefString = RefThing<*const ::core::ffi::c_char>;
pub type FNCodeFunctionGetTheFunction = ::core::option::Option<
    unsafe extern "C" fn(
        id: ::core::ffi::c_int,
        bufName: *mut *mut ::core::ffi::c_char,
        bufRoutine: *mut *mut ::core::ffi::c_void,
        bufArgs: *mut ::core::ffi::c_int,
        unused: *mut ::core::ffi::c_void,
    ),
>;
pub type FNCodeExecute = ::core::option::Option<
    unsafe extern "C" fn(
        Self_: *mut YYObjectBase,
        Other: *mut YYObjectBase,
        code: *mut CCode,
        res: *mut RValue,
        flags: ::core::ffi::c_int,
    ) -> bool,
>;
pub type PFUNC_YYGML =
    ::core::option::Option<unsafe extern "C" fn(_self: *mut CInstance, _other: *mut CInstance)>;
pub type PFUNC_YYGMLScript = ::core::option::Option<
    unsafe extern "C" fn(
        _self: *mut CInstance,
        _other: *mut CInstance,
        _return_value: *mut RValue,
        _argc: ::core::ffi::c_int,
        args: *mut *mut RValue,
    ) -> *mut RValue,
>;
pub type TRoutine = ::core::option::Option<
    unsafe extern "C" fn(
        _result: *mut RValue,
        _self: *mut CInstance,
        _other: *mut CInstance,
        _argc: ::core::ffi::c_int,
        _args: *mut RValue,
    ),
>;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CGlobals {
    pub global_object: CGlobals__bindgen_ty_1,
    pub global_scripts_array: *mut CDynamicArray<*mut CScript>,
    pub global_window_device: *mut ::core::ffi::c_void,
    pub global_window_handle: HWND,
    pub global_main_module: HMODULE,
    pub global_render_view: *mut ID3D11RenderTargetView,
    pub global_device_context: *mut ID3D11DeviceContext,
    pub global_swap_chain: *mut IDXGISwapChain,
    pub global_was_preloaded: bool,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union CGlobals__bindgen_ty_1 {
    pub object: *mut YYObjectBase,
    pub instance: *mut CInstance,
}
#[test]
fn bindgen_test_layout_CGlobals__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<CGlobals__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CGlobals__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CGlobals__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<CGlobals__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(CGlobals__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals__bindgen_ty_1),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals__bindgen_ty_1),
            "::",
            stringify!(instance)
        )
    );
}
#[test]
fn bindgen_test_layout_CGlobals() {
    const UNINIT: ::core::mem::MaybeUninit<CGlobals> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CGlobals>(),
        65usize,
        concat!("Size of: ", stringify!(CGlobals))
    );
    assert_eq!(
        ::core::mem::align_of::<CGlobals>(),
        1usize,
        concat!("Alignment of ", stringify!(CGlobals))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_object)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_scripts_array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_scripts_array)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_window_device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_window_device)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_window_handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_window_handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_main_module) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_main_module)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_render_view) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_render_view)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_device_context) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_device_context)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_swap_chain) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_swap_chain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).global_was_preloaded) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CGlobals),
            "::",
            stringify!(global_was_preloaded)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CFunctions {
    pub Code_Execute: FNCodeExecute,
    pub Code_Function_GET_the_function: FNCodeFunctionGetTheFunction,
}
#[test]
fn bindgen_test_layout_CFunctions() {
    const UNINIT: ::core::mem::MaybeUninit<CFunctions> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CFunctions>(),
        16usize,
        concat!("Size of: ", stringify!(CFunctions))
    );
    assert_eq!(
        ::core::mem::align_of::<CFunctions>(),
        1usize,
        concat!("Alignment of ", stringify!(CFunctions))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Code_Execute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFunctions),
            "::",
            stringify!(Code_Execute)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Code_Function_GET_the_function) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFunctions),
            "::",
            stringify!(Code_Function_GET_the_function)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CAPIVars {
    pub Globals: CGlobals,
    pub Functions: CFunctions,
}
#[test]
fn bindgen_test_layout_CAPIVars() {
    const UNINIT: ::core::mem::MaybeUninit<CAPIVars> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAPIVars>(),
        81usize,
        concat!("Size of: ", stringify!(CAPIVars))
    );
    assert_eq!(
        ::core::mem::align_of::<CAPIVars>(),
        1usize,
        concat!("Alignment of ", stringify!(CAPIVars))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Globals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAPIVars),
            "::",
            stringify!(Globals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Functions) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CAPIVars),
            "::",
            stringify!(Functions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RefThing<T> {
    pub thing: T,
    pub ref_count: i32,
    pub size: i32,
    pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
}
impl EJSRetValBool {
    pub const FALSE: EJSRetValBool = EJSRetValBool(0);
}
impl EJSRetValBool {
    pub const TRUE: EJSRetValBool = EJSRetValBool(1);
}
impl EJSRetValBool {
    pub const TYPE_ERROR: EJSRetValBool = EJSRetValBool(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct EJSRetValBool(pub ::core::ffi::c_int);
#[repr(C)]
pub struct CInstanceBase__bindgen_vtable(::core::ffi::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct CInstanceBase {
    pub vtable_: *const CInstanceBase__bindgen_vtable,
    pub yyvars: *mut RValue,
}
#[test]
fn bindgen_test_layout_CInstanceBase() {
    const UNINIT: ::core::mem::MaybeUninit<CInstanceBase> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CInstanceBase>(),
        16usize,
        concat!("Size of: ", stringify!(CInstanceBase))
    );
    assert_eq!(
        ::core::mem::align_of::<CInstanceBase>(),
        8usize,
        concat!("Alignment of ", stringify!(CInstanceBase))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).yyvars) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstanceBase),
            "::",
            stringify!(yyvars)
        )
    );
}
impl YYObjectBaseKind {
    pub const YYOBJECTBASE: YYObjectBaseKind = YYObjectBaseKind(0);
}
impl YYObjectBaseKind {
    pub const CINSTANCE: YYObjectBaseKind = YYObjectBaseKind(1);
}
impl YYObjectBaseKind {
    pub const ACCESSOR: YYObjectBaseKind = YYObjectBaseKind(2);
}
impl YYObjectBaseKind {
    pub const SCRIPTREF: YYObjectBaseKind = YYObjectBaseKind(3);
}
impl YYObjectBaseKind {
    pub const PROPERTY: YYObjectBaseKind = YYObjectBaseKind(4);
}
impl YYObjectBaseKind {
    pub const ARRAY: YYObjectBaseKind = YYObjectBaseKind(5);
}
impl YYObjectBaseKind {
    pub const WEAKREF: YYObjectBaseKind = YYObjectBaseKind(6);
}
impl YYObjectBaseKind {
    pub const CONTAINER: YYObjectBaseKind = YYObjectBaseKind(7);
}
impl YYObjectBaseKind {
    pub const SEQUENCE: YYObjectBaseKind = YYObjectBaseKind(8);
}
impl YYObjectBaseKind {
    pub const SEQUENCEINSTANCE: YYObjectBaseKind = YYObjectBaseKind(9);
}
impl YYObjectBaseKind {
    pub const SEQUENCETRACK: YYObjectBaseKind = YYObjectBaseKind(10);
}
impl YYObjectBaseKind {
    pub const SEQUENCECURVE: YYObjectBaseKind = YYObjectBaseKind(11);
}
impl YYObjectBaseKind {
    pub const SEQUENCECURVECHANNEL: YYObjectBaseKind = YYObjectBaseKind(12);
}
impl YYObjectBaseKind {
    pub const SEQUENCECURVEPOINT: YYObjectBaseKind = YYObjectBaseKind(13);
}
impl YYObjectBaseKind {
    pub const SEQUENCEKEYFRAMESTORE: YYObjectBaseKind = YYObjectBaseKind(14);
}
impl YYObjectBaseKind {
    pub const SEQUENCEKEYFRAME: YYObjectBaseKind = YYObjectBaseKind(15);
}
impl YYObjectBaseKind {
    pub const SEQUENCEKEYFRAMEDATA: YYObjectBaseKind = YYObjectBaseKind(16);
}
impl YYObjectBaseKind {
    pub const SEQUENCEEVALTREE: YYObjectBaseKind = YYObjectBaseKind(17);
}
impl YYObjectBaseKind {
    pub const SEQUENCEEVALNODE: YYObjectBaseKind = YYObjectBaseKind(18);
}
impl YYObjectBaseKind {
    pub const SEQUENCEEVENT: YYObjectBaseKind = YYObjectBaseKind(19);
}
impl YYObjectBaseKind {
    pub const NINESLICE: YYObjectBaseKind = YYObjectBaseKind(20);
}
impl YYObjectBaseKind {
    pub const MAX: YYObjectBaseKind = YYObjectBaseKind(21);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct YYObjectBaseKind(pub i32);
#[repr(C)]
#[derive(Debug)]
pub struct YYObjectBase {
    pub _base: CInstanceBase,
    pub m_pNextObject: *mut YYObjectBase,
    pub m_pPrevObject: *mut YYObjectBase,
    pub m_prototype: *mut YYObjectBase,
    pub m_class: *const ::core::ffi::c_char,
    pub m_getOwnProperty: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut YYObjectBase,
            val: *mut RValue,
            name: *const ::core::ffi::c_char,
        ),
    >,
    pub m_deleteProperty: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut YYObjectBase,
            val: *mut RValue,
            name: *const ::core::ffi::c_char,
            dothrow: bool,
        ),
    >,
    pub m_defineOwnProperty: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut YYObjectBase,
            name: *const ::core::ffi::c_char,
            val: *mut RValue,
            dothrow: bool,
        ) -> EJSRetValBool,
    >,
    pub m_yyvarsMap: *mut CHashMap<::core::ffi::c_int, *mut RValue>,
    pub m_pWeakRefs: *mut *mut CWeakRef,
    pub m_numWeakRefs: ::core::ffi::c_uint,
    pub m_nvars: ::core::ffi::c_uint,
    pub m_flags: ::core::ffi::c_uint,
    pub m_capacity: ::core::ffi::c_uint,
    pub m_visited: ::core::ffi::c_uint,
    pub m_visitedGC: ::core::ffi::c_uint,
    pub m_GCgen: ::core::ffi::c_int,
    pub m_GCcreationframe: ::core::ffi::c_int,
    pub m_slot: ::core::ffi::c_int,
    pub kind: YYObjectBaseKind,
    pub m_rvalueInitType: ::core::ffi::c_int,
    pub m_curSlot: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_YYObjectBase() {
    const UNINIT: ::core::mem::MaybeUninit<YYObjectBase> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<YYObjectBase>(),
        136usize,
        concat!("Size of: ", stringify!(YYObjectBase))
    );
    assert_eq!(
        ::core::mem::align_of::<YYObjectBase>(),
        8usize,
        concat!("Alignment of ", stringify!(YYObjectBase))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pNextObject) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_pNextObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pPrevObject) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_pPrevObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_prototype) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_prototype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_class) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_class)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_getOwnProperty) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_getOwnProperty)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_deleteProperty) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_deleteProperty)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_defineOwnProperty) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_defineOwnProperty)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_yyvarsMap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_yyvarsMap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pWeakRefs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_pWeakRefs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_numWeakRefs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_numWeakRefs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_nvars) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_nvars)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_capacity) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_capacity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_visited) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_visited)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_visitedGC) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_visitedGC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_GCgen) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_GCgen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_GCcreationframe) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_GCcreationframe)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_slot) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_slot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_rvalueInitType) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_rvalueInitType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_curSlot) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(YYObjectBase),
            "::",
            stringify!(m_curSlot)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CWeakRef {
    pub _base: YYObjectBase,
    pub pWeakRef: *mut YYObjectBase,
}
#[test]
fn bindgen_test_layout_CWeakRef() {
    const UNINIT: ::core::mem::MaybeUninit<CWeakRef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CWeakRef>(),
        144usize,
        concat!("Size of: ", stringify!(CWeakRef))
    );
    assert_eq!(
        ::core::mem::align_of::<CWeakRef>(),
        8usize,
        concat!("Alignment of ", stringify!(CWeakRef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pWeakRef) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CWeakRef),
            "::",
            stringify!(pWeakRef)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vec3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_vec3() {
    const UNINIT: ::core::mem::MaybeUninit<vec3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<vec3>(),
        12usize,
        concat!("Size of: ", stringify!(vec3))
    );
    assert_eq!(
        ::core::mem::align_of::<vec3>(),
        4usize,
        concat!("Alignment of ", stringify!(vec3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vec3), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vec3), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vec3), "::", stringify!(z))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_vec4() {
    const UNINIT: ::core::mem::MaybeUninit<vec4> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<vec4>(),
        16usize,
        concat!("Size of: ", stringify!(vec4))
    );
    assert_eq!(
        ::core::mem::align_of::<vec4>(),
        4usize,
        concat!("Alignment of ", stringify!(vec4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vec4), "::", stringify!(w))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matrix44 {
    pub m: [vec4; 4usize],
}
#[test]
fn bindgen_test_layout_matrix44() {
    const UNINIT: ::core::mem::MaybeUninit<matrix44> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<matrix44>(),
        64usize,
        concat!("Size of: ", stringify!(matrix44))
    );
    assert_eq!(
        ::core::mem::align_of::<matrix44>(),
        4usize,
        concat!("Alignment of ", stringify!(matrix44))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix44),
            "::",
            stringify!(m)
        )
    );
}
impl RValueKind {
    pub const REAL: RValueKind = RValueKind(0);
}
impl RValueKind {
    pub const STRING: RValueKind = RValueKind(1);
}
impl RValueKind {
    pub const ARRAY: RValueKind = RValueKind(2);
}
impl RValueKind {
    pub const PTR: RValueKind = RValueKind(3);
}
impl RValueKind {
    pub const VEC3: RValueKind = RValueKind(4);
}
impl RValueKind {
    pub const UNDEFINED: RValueKind = RValueKind(5);
}
impl RValueKind {
    pub const OBJECT: RValueKind = RValueKind(6);
}
impl RValueKind {
    pub const INT32: RValueKind = RValueKind(7);
}
impl RValueKind {
    pub const VEC4: RValueKind = RValueKind(8);
}
impl RValueKind {
    pub const MATRIX44: RValueKind = RValueKind(9);
}
impl RValueKind {
    pub const INT64: RValueKind = RValueKind(10);
}
impl RValueKind {
    pub const ACCESSOR: RValueKind = RValueKind(11);
}
impl RValueKind {
    pub const NULL: RValueKind = RValueKind(12);
}
impl RValueKind {
    pub const BOOL: RValueKind = RValueKind(13);
}
impl RValueKind {
    pub const ITERATOR: RValueKind = RValueKind(14);
}
impl RValueKind {
    pub const REF: RValueKind = RValueKind(15);
}
impl RValueKind {
    pub const UNSET: RValueKind = RValueKind(16777215);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct RValueKind(pub u32);
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct RValueFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_RValueFlags() {
    assert_eq!(
        ::core::mem::size_of::<RValueFlags>(),
        4usize,
        concat!("Size of: ", stringify!(RValueFlags))
    );
    assert_eq!(
        ::core::mem::align_of::<RValueFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(RValueFlags))
    );
}
impl RValueFlags {
    #[inline]
    pub fn enumerable(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enumerable(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn configurable(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_configurable(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn writable(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_writable(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn owned(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_owned(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enumerable: bool,
        configurable: bool,
        writable: bool,
        owned: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enumerable: u8 = unsafe { ::core::mem::transmute(enumerable) };
            enumerable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let configurable: u8 = unsafe { ::core::mem::transmute(configurable) };
            configurable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let writable: u8 = unsafe { ::core::mem::transmute(writable) };
            writable as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let owned: u8 = unsafe { ::core::mem::transmute(owned) };
            owned as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static JS_BUILTIN_PROPERTY_DEFAULT: RValueFlags;
}
extern "C" {
    pub static JS_BUILTIN_LENGTH_PROPERTY_DEFAULT: RValueFlags;
}
pub type GetCtxStackTop = ::core::option::Option<unsafe extern "C" fn() -> *mut YYObjectBase>;
pub type DetPotRoot = ::core::option::Option<
    unsafe extern "C" fn(_pContainer: *mut YYObjectBase, _yy_object_baseect: *mut YYObjectBase),
>;
pub type FREE_RVal_Pre = ::core::option::Option<unsafe extern "C" fn(p: *mut RValue)>;
pub type COPY_RValue_do__Post_t =
    ::core::option::Option<unsafe extern "C" fn(dest: *mut RValue, src: *mut RValue)>;
pub type YYSetStr = ::core::option::Option<
    unsafe extern "C" fn(_pVal: *mut RValue, _pS: *const ::core::ffi::c_char),
>;
pub type YYCreStr = ::core::option::Option<
    unsafe extern "C" fn(_pVal: *mut RValue, _pS: *const ::core::ffi::c_char),
>;
pub type YYDupStr = ::core::option::Option<
    unsafe extern "C" fn(_pStr: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char,
>;
pub type ARRAYLVal = ::core::option::Option<
    unsafe extern "C" fn(_pV: *mut RValue, _index: ::core::ffi::c_int) -> *mut RValue,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DValue {
    pub __bindgen_anon_1: DValue__bindgen_ty_1,
    pub flags: u32,
    pub type_: u32,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union DValue__bindgen_ty_1 {
    pub __64: i64,
    pub __ptr: *mut ::core::ffi::c_void,
    pub __arr: *mut RefDynamicArrayOfRValue,
    pub __obj: *mut YYObjectBase,
}
#[test]
fn bindgen_test_layout_DValue__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<DValue__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DValue__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DValue__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<DValue__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(DValue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue__bindgen_ty_1),
            "::",
            stringify!(__64)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue__bindgen_ty_1),
            "::",
            stringify!(__ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__arr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue__bindgen_ty_1),
            "::",
            stringify!(__arr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue__bindgen_ty_1),
            "::",
            stringify!(__obj)
        )
    );
}
#[test]
fn bindgen_test_layout_DValue() {
    const UNINIT: ::core::mem::MaybeUninit<DValue> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DValue>(),
        16usize,
        concat!("Size of: ", stringify!(DValue))
    );
    assert_eq!(
        ::core::mem::align_of::<DValue>(),
        4usize,
        concat!("Alignment of ", stringify!(DValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DValue),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RValue {
    pub value: RValue_Value,
    pub flags: RValueFlags,
    pub tag: RValueKind,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union RValue_Value {
    pub i32_: i32,
    pub i64_: i64,
    pub f64_: f64,
    pub ptr: RValue_Value_Ptr,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union RValue_Value_Ptr {
    pub opaque: *mut ::core::ffi::c_void,
    pub ref_string: *mut RefString,
    pub ref_array: *mut RefDynamicArrayOfRValue,
    pub object: *mut YYObjectBase,
    pub vec4: *mut vec4,
    pub matrix44: *mut matrix44,
}
#[test]
fn bindgen_test_layout_RValue_Value_Ptr() {
    const UNINIT: ::core::mem::MaybeUninit<RValue_Value_Ptr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RValue_Value_Ptr>(),
        8usize,
        concat!("Size of: ", stringify!(RValue_Value_Ptr))
    );
    assert_eq!(
        ::core::mem::align_of::<RValue_Value_Ptr>(),
        4usize,
        concat!("Alignment of ", stringify!(RValue_Value_Ptr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(ref_string)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(ref_array)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vec4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(vec4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).matrix44) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value_Ptr),
            "::",
            stringify!(matrix44)
        )
    );
}
#[test]
fn bindgen_test_layout_RValue_Value() {
    const UNINIT: ::core::mem::MaybeUninit<RValue_Value> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RValue_Value>(),
        8usize,
        concat!("Size of: ", stringify!(RValue_Value))
    );
    assert_eq!(
        ::core::mem::align_of::<RValue_Value>(),
        4usize,
        concat!("Alignment of ", stringify!(RValue_Value))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value),
            "::",
            stringify!(i32_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value),
            "::",
            stringify!(i64_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value),
            "::",
            stringify!(f64_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue_Value),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_RValue() {
    const UNINIT: ::core::mem::MaybeUninit<RValue> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RValue>(),
        16usize,
        concat!("Size of: ", stringify!(RValue))
    );
    assert_eq!(
        ::core::mem::align_of::<RValue>(),
        4usize,
        concat!("Alignment of ", stringify!(RValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RValue),
            "::",
            stringify!(tag)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct RefDynamicArrayOfRValue {
    pub _base: YYObjectBase,
    pub ref_count: i32,
    pub flags: i32,
    pub array: *mut RValue,
    pub owner: *mut ::core::ffi::c_void,
    pub visited: i32,
    pub length: i32,
}
#[test]
fn bindgen_test_layout_RefDynamicArrayOfRValue() {
    const UNINIT: ::core::mem::MaybeUninit<RefDynamicArrayOfRValue> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RefDynamicArrayOfRValue>(),
        168usize,
        concat!("Size of: ", stringify!(RefDynamicArrayOfRValue))
    );
    assert_eq!(
        ::core::mem::align_of::<RefDynamicArrayOfRValue>(),
        8usize,
        concat!("Alignment of ", stringify!(RefDynamicArrayOfRValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).visited) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(visited)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(RefDynamicArrayOfRValue),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RToken {
    pub kind: ::core::ffi::c_int,
    pub type_: ::core::ffi::c_uint,
    pub ind: ::core::ffi::c_int,
    pub ind2: ::core::ffi::c_int,
    pub value: RValue,
    pub itemnumb: ::core::ffi::c_int,
    pub items: *mut RToken,
    pub position: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_RToken() {
    const UNINIT: ::core::mem::MaybeUninit<RToken> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RToken>(),
        56usize,
        concat!("Size of: ", stringify!(RToken))
    );
    assert_eq!(
        ::core::mem::align_of::<RToken>(),
        8usize,
        concat!("Alignment of ", stringify!(RToken))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(ind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ind2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(ind2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itemnumb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(itemnumb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RToken),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CCode {
    pub _vptr_CCode_: *mut ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub m_pNext: *mut CCode,
    pub i_kind: ::core::ffi::c_int,
    pub i_compiled: ::core::ffi::c_int,
    pub i_str: *const ::core::ffi::c_char,
    pub i_token: RToken,
    pub i_value: RValue,
    pub i_pVM: *mut VMBuffer,
    pub i_pVMDebugInfo: *mut VMBuffer,
    pub i_pCode: *mut ::core::ffi::c_char,
    pub name: *const ::core::ffi::c_char,
    pub index: ::core::ffi::c_int,
    pub i_pFunc: *mut YYGMLFuncs,
    pub i_watch: bool,
    pub i_offset: ::core::ffi::c_int,
    pub i_locals: ::core::ffi::c_int,
    pub i_args: ::core::ffi::c_int,
    pub i_flags: ::core::ffi::c_int,
    pub i_pPrototype: *mut YYObjectBase,
}
#[test]
fn bindgen_test_layout_CCode() {
    const UNINIT: ::core::mem::MaybeUninit<CCode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CCode>(),
        184usize,
        concat!("Size of: ", stringify!(CCode))
    );
    assert_eq!(
        ::core::mem::align_of::<CCode>(),
        8usize,
        concat!("Alignment of ", stringify!(CCode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._vptr_CCode_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(_vptr_CCode_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(m_pNext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_kind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_compiled) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_compiled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_str) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_str)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_token) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_token)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_value) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_pVM) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_pVM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_pVMDebugInfo) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_pVMDebugInfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_pCode) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_pCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_pFunc) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_pFunc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_watch) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_watch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_offset) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_locals) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_locals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_args) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_args)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_flags) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_pPrototype) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CCode),
            "::",
            stringify!(i_pPrototype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDynamicArray<T> {
    pub m_arrayLength: ::core::ffi::c_int,
    pub Elements: *mut T,
    pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDynamicArrayRef<T> {
    pub m_refCount: ::core::ffi::c_int,
    pub Array: *mut CDynamicArray<T>,
    pub pOwner: *mut RValue,
    pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHashMap<Key, Value> {
    pub m_curSize: ::core::ffi::c_int,
    pub m_numUsed: ::core::ffi::c_int,
    pub m_curMask: ::core::ffi::c_int,
    pub m_growThreshold: ::core::ffi::c_int,
    pub m_pBuckets: *mut CHashMap_CElement<Key, Value>,
    pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<Key>>,
    pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHashMap_CElement<Key, Value> {
    pub v: Value,
    pub k: Key,
    pub Hash: ::core::ffi::c_uint,
    pub _phantom_0: ::core::marker::PhantomData<::core::cell::UnsafeCell<Key>>,
    pub _phantom_1: ::core::marker::PhantomData<::core::cell::UnsafeCell<Value>>,
}
pub type CInstance_ctor = ::core::option::Option<
    unsafe extern "C" fn(
        this_: *mut CInstance,
        a2: f32,
        a3: f32,
        a4: ::core::ffi::c_int,
        a5: ::core::ffi::c_int,
        a6: bool,
    ) -> *mut CInstance,
>;
pub type CInstance_dctor =
    ::core::option::Option<unsafe extern "C" fn(this_: *mut CInstance) -> *mut ::core::ffi::c_void>;
pub type CObjectGM_AddInstance = ::core::option::Option<
    unsafe extern "C" fn(CObjectGM_this: *mut ::core::ffi::c_void, real_this: *mut CInstance),
>;
pub type CObjectGM_RemoveInstance = ::core::option::Option<
    unsafe extern "C" fn(CObjectGM_this: *mut ::core::ffi::c_void, real_this: *mut CInstance),
>;
#[repr(C)]
#[derive(Debug)]
pub struct CInstance {
    pub _base: YYObjectBase,
    pub m_CreateCounter: i64,
    pub m_pObject: *mut ::core::ffi::c_void,
    pub m_pPhysicsObject: *mut ::core::ffi::c_void,
    pub m_pSkeletonAnimation: *mut ::core::ffi::c_void,
    pub m_pControllingSeqInst: *mut ::core::ffi::c_void,
    pub m_Instflags: ::core::ffi::c_uint,
    pub id: ::core::ffi::c_int,
    pub object_index: ::core::ffi::c_int,
    pub sprite_index: ::core::ffi::c_int,
    pub i_sequencePos: f32,
    pub i_lastSequencePos: f32,
    pub i_sequenceDir: f32,
    pub image_index: f32,
    pub image_speed: f32,
    pub image_xscale: f32,
    pub image_yscale: f32,
    pub image_angle: f32,
    pub image_alpha: f32,
    pub image_blend: ::core::ffi::c_uint,
    pub x: f32,
    pub y: f32,
    pub xstart: f32,
    pub ystart: f32,
    pub xprevious: f32,
    pub yprevious: f32,
    pub direction: f32,
    pub speed: f32,
    pub friction: f32,
    pub gravity_direction: f32,
    pub gravity: f32,
    pub hspeed: f32,
    pub vspeed: f32,
    pub bbox: [::core::ffi::c_int; 4usize],
    pub timer: [::core::ffi::c_int; 12usize],
    pub m_pPathAndTimeline: *mut ::core::ffi::c_void,
    pub i_initcode: *mut CCode,
    pub i_precreatecode: *mut CCode,
    pub m_pOldObject: *mut ::core::ffi::c_void,
    pub layer: ::core::ffi::c_int,
    pub mask_index: ::core::ffi::c_int,
    pub m_nMouseOver: i16,
    pub m_pNext: *mut CInstance,
    pub m_pPrev: *mut CInstance,
    pub m_collisionLink: [*mut ::core::ffi::c_void; 3usize],
    pub m_dirtyLink: [*mut ::core::ffi::c_void; 3usize],
    pub m_withLink: [*mut ::core::ffi::c_void; 3usize],
    pub depth: f32,
    pub i_currentdepth: f32,
    pub i_lastImageNumber: f32,
    pub m_collisionTestNumber: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_CInstance() {
    const UNINIT: ::core::mem::MaybeUninit<CInstance> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CInstance>(),
        504usize,
        concat!("Size of: ", stringify!(CInstance))
    );
    assert_eq!(
        ::core::mem::align_of::<CInstance>(),
        8usize,
        concat!("Alignment of ", stringify!(CInstance))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_CreateCounter) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_CreateCounter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pObject) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pPhysicsObject) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pPhysicsObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pSkeletonAnimation) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pSkeletonAnimation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pControllingSeqInst) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pControllingSeqInst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_Instflags) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_Instflags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).object_index) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(object_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sprite_index) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(sprite_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_sequencePos) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_sequencePos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_lastSequencePos) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_lastSequencePos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_sequenceDir) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_sequenceDir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_index) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_speed) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_speed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_xscale) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_xscale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_yscale) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_yscale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_angle) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_angle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_alpha) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_alpha)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image_blend) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(image_blend)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xstart) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(xstart)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ystart) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(ystart)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xprevious) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(xprevious)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).yprevious) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(yprevious)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).friction) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(friction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gravity_direction) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(gravity_direction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gravity) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(gravity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hspeed) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(hspeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vspeed) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(vspeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bbox) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(bbox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timer) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pPathAndTimeline) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pPathAndTimeline)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_initcode) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_initcode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_precreatecode) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_precreatecode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pOldObject) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pOldObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mask_index) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(mask_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_nMouseOver) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_nMouseOver)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pNext) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pNext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pPrev) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_pPrev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_collisionLink) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_collisionLink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_dirtyLink) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_dirtyLink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_withLink) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_withLink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_currentdepth) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_currentdepth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i_lastImageNumber) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(i_lastImageNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_collisionTestNumber) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstance),
            "::",
            stringify!(m_collisionTestNumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YYGMLException {
    pub m_object: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_YYGMLException() {
    const UNINIT: ::core::mem::MaybeUninit<YYGMLException> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<YYGMLException>(),
        16usize,
        concat!("Size of: ", stringify!(YYGMLException))
    );
    assert_eq!(
        ::core::mem::align_of::<YYGMLException>(),
        1usize,
        concat!("Alignment of ", stringify!(YYGMLException))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYGMLException),
            "::",
            stringify!(m_object)
        )
    );
}
pub type Code_Execute = ::core::option::Option<
    unsafe extern "C" fn(
        self_: *mut CInstance,
        other: *mut CInstance,
        code: *mut CCode,
        a4: *mut RValue,
        a5: ::core::ffi::c_int,
    ) -> bool,
>;
pub type Code_Function_GET_the_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        index: ::core::ffi::c_int,
        out_function_name: *mut *const ::core::ffi::c_char,
        out_function_pointer: *mut TRoutine,
        out_function_arg_count: *mut ::core::ffi::c_int,
    ),
>;
impl Color {
    pub const BLACK: Color = Color(0);
}
impl Color {
    pub const DARK_BLUE: Color = Color(1);
}
impl Color {
    pub const GREEN: Color = Color(2);
}
impl Color {
    pub const AQUA: Color = Color(3);
}
impl Color {
    pub const RED: Color = Color(4);
}
impl Color {
    pub const PURPLE: Color = Color(5);
}
impl Color {
    pub const GOLD: Color = Color(6);
}
impl Color {
    pub const DEFAULT: Color = Color(7);
}
impl Color {
    pub const GRAY: Color = Color(8);
}
impl Color {
    pub const BLUE: Color = Color(9);
}
impl Color {
    pub const MATRIX_GREEN: Color = Color(10);
}
impl Color {
    pub const LIGHT_BLUE: Color = Color(11);
}
impl Color {
    pub const TANGERINE: Color = Color(12);
}
impl Color {
    pub const BRIGHT_PURPLE: Color = Color(13);
}
impl Color {
    pub const YELLOW: Color = Color(14);
}
impl Color {
    pub const WHITE: Color = Color(15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Color(pub i32);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRoom {
    pub unk: [::core::ffi::c_char; 216usize],
    pub instances: *mut CInstance,
}
#[test]
fn bindgen_test_layout_CRoom() {
    const UNINIT: ::core::mem::MaybeUninit<CRoom> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRoom>(),
        224usize,
        concat!("Size of: ", stringify!(CRoom))
    );
    assert_eq!(
        ::core::mem::align_of::<CRoom>(),
        8usize,
        concat!("Alignment of ", stringify!(CRoom))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRoom),
            "::",
            stringify!(unk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).instances) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CRoom),
            "::",
            stringify!(instances)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CStream {
    pub m_ReadOnly: bool,
    pub internal_buffer_size: ::core::ffi::c_int,
    pub internal_current_position: ::core::ffi::c_int,
    pub internal_buffer: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_CStream() {
    const UNINIT: ::core::mem::MaybeUninit<CStream> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CStream>(),
        24usize,
        concat!("Size of: ", stringify!(CStream))
    );
    assert_eq!(
        ::core::mem::align_of::<CStream>(),
        8usize,
        concat!("Alignment of ", stringify!(CStream))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_ReadOnly) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CStream),
            "::",
            stringify!(m_ReadOnly)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).internal_buffer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CStream),
            "::",
            stringify!(internal_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).internal_current_position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CStream),
            "::",
            stringify!(internal_current_position)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).internal_buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CStream),
            "::",
            stringify!(internal_buffer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CScript {
    pub _vptr_CScript_: *mut ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub m_code: *mut CCode,
    pub m_funcs: *mut YYGMLFuncs,
    pub m_static_object: *mut CInstance,
    pub __bindgen_anon_1: CScript__bindgen_ty_1,
    pub m_script_name: *const ::core::ffi::c_char,
    pub m_offset: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CScript__bindgen_ty_1 {
    pub m_script: *const ::core::ffi::c_char,
    pub m_compiled_index: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_CScript__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<CScript__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CScript__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CScript__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<CScript__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CScript__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_script) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript__bindgen_ty_1),
            "::",
            stringify!(m_script)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_compiled_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript__bindgen_ty_1),
            "::",
            stringify!(m_compiled_index)
        )
    );
}
#[test]
fn bindgen_test_layout_CScript() {
    const UNINIT: ::core::mem::MaybeUninit<CScript> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CScript>(),
        56usize,
        concat!("Size of: ", stringify!(CScript))
    );
    assert_eq!(
        ::core::mem::align_of::<CScript>(),
        8usize,
        concat!("Alignment of ", stringify!(CScript))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._vptr_CScript_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(_vptr_CScript_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(m_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_funcs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(m_funcs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_static_object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(m_static_object)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_script_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(m_script_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CScript),
            "::",
            stringify!(m_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CScriptRef {
    pub _base: YYObjectBase,
    pub m_unk: *mut ::core::ffi::c_void,
    pub m_unk2: *mut ::core::ffi::c_void,
    pub m_unk3: *mut ::core::ffi::c_void,
    pub m_unk4: *mut ::core::ffi::c_void,
    pub m_unk5: *mut ::core::ffi::c_void,
    pub m_unk6: *mut ::core::ffi::c_void,
    pub m_unk7: *mut ::core::ffi::c_void,
    pub m_call_script: *mut CScript,
}
#[test]
fn bindgen_test_layout_CScriptRef() {
    const UNINIT: ::core::mem::MaybeUninit<CScriptRef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CScriptRef>(),
        200usize,
        concat!("Size of: ", stringify!(CScriptRef))
    );
    assert_eq!(
        ::core::mem::align_of::<CScriptRef>(),
        8usize,
        concat!("Alignment of ", stringify!(CScriptRef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk3) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk4) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk5) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk6) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_unk7) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_unk7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_call_script) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CScriptRef),
            "::",
            stringify!(m_call_script)
        )
    );
}
pub type debug_console_output_t = ::core::option::Option<
    unsafe extern "C" fn(this_: *mut ::core::ffi::c_void, fmt: *const ::core::ffi::c_char, ...),
>;
impl EVariableType {
    pub const SELF: EVariableType = EVariableType(-1);
}
impl EVariableType {
    pub const OTHER: EVariableType = EVariableType(-2);
}
impl EVariableType {
    pub const ALL: EVariableType = EVariableType(-3);
}
impl EVariableType {
    pub const NOONE: EVariableType = EVariableType(-4);
}
impl EVariableType {
    pub const GLOBAL: EVariableType = EVariableType(-5);
}
impl EVariableType {
    pub const BUILTIN: EVariableType = EVariableType(-6);
}
impl EVariableType {
    pub const LOCAL: EVariableType = EVariableType(-7);
}
impl EVariableType {
    pub const STACKTOP: EVariableType = EVariableType(-9);
}
impl EVariableType {
    pub const ARGUMENT: EVariableType = EVariableType(-15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct EVariableType(pub i32);
impl EventType {
    pub const CODE_EXECUTE: EventType = EventType(1);
}
impl EventType {
    pub const YYERROR: EventType = EventType(2);
}
impl EventType {
    pub const ENDSCENE: EventType = EventType(4);
}
impl EventType {
    pub const PRESENT: EventType = EventType(8);
}
impl EventType {
    pub const RESIZEBUFFERS: EventType = EventType(16);
}
impl EventType {
    pub const WNDPROC: EventType = EventType(32);
}
impl EventType {
    pub const DOCALLSCRIPT: EventType = EventType(64);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct EventType(pub u64);
pub type GetSaveFileName_t = ::core::option::Option<
    unsafe extern "C" fn(
        output_path: *mut ::core::ffi::c_char,
        size_of_output_path: i64,
        input_path: *const ::core::ffi::c_char,
    ) -> i64,
>;
pub type IO_UpdateM_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type RVariableRoutineGetter = ::core::option::Option<
    unsafe extern "C" fn(
        self_: *mut CInstance,
        a2: *mut ::core::ffi::c_void,
        out: *mut RValue,
    ) -> bool,
>;
pub type RVariableRoutineSetter = ::core::option::Option<
    unsafe extern "C" fn(
        self_: *mut CInstance,
        a2: *mut ::core::ffi::c_void,
        new_value: *mut RValue,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RVariableRoutine {
    pub name: *const ::core::ffi::c_char,
    pub getter: RVariableRoutineGetter,
    pub setter: RVariableRoutineSetter,
    pub has_setter: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_RVariableRoutine() {
    const UNINIT: ::core::mem::MaybeUninit<RVariableRoutine> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RVariableRoutine>(),
        32usize,
        concat!("Size of: ", stringify!(RVariableRoutine))
    );
    assert_eq!(
        ::core::mem::align_of::<RVariableRoutine>(),
        8usize,
        concat!("Alignment of ", stringify!(RVariableRoutine))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RVariableRoutine),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RVariableRoutine),
            "::",
            stringify!(getter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RVariableRoutine),
            "::",
            stringify!(setter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).has_setter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RVariableRoutine),
            "::",
            stringify!(has_setter)
        )
    );
}
pub type Script_Data_t = ::core::option::Option<
    unsafe extern "C" fn(script_function_index: ::core::ffi::c_int) -> *mut CScript,
>;
pub type StructCreate_t = ::core::option::Option<unsafe extern "C" fn(out_result: *mut RValue)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VMBuffer {
    pub vTable: *mut *mut ::core::ffi::c_void,
    pub m_size: ::core::ffi::c_int,
    pub m_numLocalVarsUsed: ::core::ffi::c_int,
    pub m_numArguments: ::core::ffi::c_int,
    pub m_pBuffer: *mut ::core::ffi::c_char,
    pub m_pConvertedBuffer: *mut *mut ::core::ffi::c_void,
    pub m_pJumpBuffer: *mut ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_VMBuffer() {
    const UNINIT: ::core::mem::MaybeUninit<VMBuffer> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<VMBuffer>(),
        48usize,
        concat!("Size of: ", stringify!(VMBuffer))
    );
    assert_eq!(
        ::core::mem::align_of::<VMBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(VMBuffer))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(vTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_numLocalVarsUsed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_numLocalVarsUsed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_numArguments) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_numArguments)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_pBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pConvertedBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_pConvertedBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_pJumpBuffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VMBuffer),
            "::",
            stringify!(m_pJumpBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VMExec {
    pub pPrev: *mut VMExec,
    pub pNext: *mut VMExec,
    pub pStack: *mut ::core::ffi::c_char,
    pub localCount: ::core::ffi::c_int,
    pub pLocals: *mut YYObjectBase,
    pub pSelf: *mut YYObjectBase,
    pub pOther: *mut YYObjectBase,
    pub pCCode: *mut CCode,
    pub pArgs: *mut RValue,
    pub argumentCount: ::core::ffi::c_int,
    pub pCode: *const ::core::ffi::c_char,
    pub pBP: *mut ::core::ffi::c_char,
    pub pBuffer: *mut VMBuffer,
    pub line: ::core::ffi::c_int,
    pub pName: *const ::core::ffi::c_char,
    pub pDebugInfo: *mut VMBuffer,
    pub pScript: *const ::core::ffi::c_char,
    pub stackSize: ::core::ffi::c_int,
    pub offs: ::core::ffi::c_int,
    pub boffs: ::core::ffi::c_int,
    pub retCount: ::core::ffi::c_int,
    pub bufferSize: ::core::ffi::c_int,
    pub prevoffs: ::core::ffi::c_int,
    pub buff: *mut *mut ::core::ffi::c_void,
    pub jt: *mut ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_VMExec() {
    const UNINIT: ::core::mem::MaybeUninit<VMExec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<VMExec>(),
        176usize,
        concat!("Size of: ", stringify!(VMExec))
    );
    assert_eq!(
        ::core::mem::align_of::<VMExec>(),
        8usize,
        concat!("Alignment of ", stringify!(VMExec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pPrev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pPrev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pStack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pStack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).localCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(localCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pLocals) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pLocals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pSelf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pSelf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pOther) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pOther)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pCCode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pCCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pArgs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pArgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).argumentCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(argumentCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pCode) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pBP) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pBP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pBuffer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pName) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pDebugInfo) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pDebugInfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pScript) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(pScript)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stackSize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(stackSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).boffs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(boffs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).retCount) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(retCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prevoffs) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(prevoffs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buff) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(buff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).jt) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VMExec),
            "::",
            stringify!(jt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YYGMLFuncs {
    pub m_name: *const ::core::ffi::c_char,
    pub __bindgen_anon_1: YYGMLFuncs__bindgen_ty_1,
    pub m_func_var: *mut YYVAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YYGMLFuncs__bindgen_ty_1 {
    pub m_script_function: PFUNC_YYGMLScript,
    pub m_function: PFUNC_YYGML,
}
#[test]
fn bindgen_test_layout_YYGMLFuncs__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<YYGMLFuncs__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<YYGMLFuncs__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YYGMLFuncs__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<YYGMLFuncs__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YYGMLFuncs__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_script_function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYGMLFuncs__bindgen_ty_1),
            "::",
            stringify!(m_script_function)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYGMLFuncs__bindgen_ty_1),
            "::",
            stringify!(m_function)
        )
    );
}
#[test]
fn bindgen_test_layout_YYGMLFuncs() {
    const UNINIT: ::core::mem::MaybeUninit<YYGMLFuncs> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<YYGMLFuncs>(),
        24usize,
        concat!("Size of: ", stringify!(YYGMLFuncs))
    );
    assert_eq!(
        ::core::mem::align_of::<YYGMLFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(YYGMLFuncs))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYGMLFuncs),
            "::",
            stringify!(m_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_func_var) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YYGMLFuncs),
            "::",
            stringify!(m_func_var)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YYVAR {
    pub pName: *const ::core::ffi::c_char,
    pub val: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_YYVAR() {
    const UNINIT: ::core::mem::MaybeUninit<YYVAR> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<YYVAR>(),
        16usize,
        concat!("Size of: ", stringify!(YYVAR))
    );
    assert_eq!(
        ::core::mem::align_of::<YYVAR>(),
        8usize,
        concat!("Alignment of ", stringify!(YYVAR))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYVAR),
            "::",
            stringify!(pName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YYVAR),
            "::",
            stringify!(val)
        )
    );
}
